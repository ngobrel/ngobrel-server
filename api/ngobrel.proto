syntax = "proto3";
option go_package = "ngobrel";
/*
# Ngobrel service

To use Ngobrel service, a user need to have a device. Each user must have at least one device and could have more than one devices.
Prior using the service, a device must perform an authentication step.
All requests are considered successful unless an exception is thrown.
Downloaded conversations are not kept, and will be gone after they are downloaded.

Functions prefixed with Public are public methods. All protected methods will have the following variables exposed
through metadata:

 * `string myUserID`, the UUID string of currently login `userID`
 * `string myDeviceID`, the UUID string of currently login `deviceID`

## Authentication process

Authentication is performed by using `CreateProfile` API. Ngobrel will send an OTP to the phone number.
Client is responsible to send OTP verification by using `VerifyOTP` API. The token received from this API can then 
used for all subsequence calls by putting it in metadata under key of `token`.

## Sending messages
To send a message to a particular username, use `putMessage` API.

## Receiving messages
To get a message for a particular dvice, use `getMessages` API.
 
  */
service Ngobrel {

    /**
    Retrieves public keys associated with the requested userID
    */
//    rpc PublicGetKeys(PublicGetKeysRequest) returns (PublicGetKeysResponse) {}

    /**
    Puts public keys associated with currently logged in user
    */
//    rpc PutKeys(PutKeysRequest) returns (PutKeysResponse) {}
    
    /**
    Sends message
    */
    rpc PutMessage(PutMessageRequest) returns (PutMessageResponse) {}
    
    /**
    Gets messages for currently logged in deviceID
    */
    rpc GetMessages(GetMessagesRequest) returns (stream GetMessagesResponseItem) {}

    /**
    Get notifications for incoming messages
    */
    rpc GetMessageNotification(GetMessagesRequest) returns (stream GetMessageNotificationStream) {}

    /**
    Uploads media file
    */
    rpc UploadMedia(stream UploadMediaRequest) returns (UploadMediaResponse) {}
    
    /**
    Gets media file
    */
    rpc GetMedia(GetMediaRequest) returns(stream GetMediaResponse) {}

    /**
    Creates a group conversation
    */
    rpc CreateGroupConversation(CreateGroupConversationRequest) returns (CreateGroupConversationResponse) {}

    /**
    Creates a new conversation, either a peer-to-peer or group conversation
    */
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}

    /**
    List available conversations for currently logged in userID
    */
    rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {}
 
    /**
    Updates a conversation
    */
    rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {}

    /**
    Lists all participants in a group
    */
    rpc ListGroupParticipants(ListGroupParticipantsRequest) returns (ListGroupParticipantsResponse) {}

    /**
    Removes an admin role of a group from a user
    */
    rpc RemoveAdminRole(RemoveAdminRoleRequest) returns (RemoveAdminRoleResponse) {}

    /**
    Removes a user from a group
    */
    rpc RemoveFromGroup(RemoveFromGroupRequest) returns (RemoveFromGroupResponse) {}

    /**
    Invite other people into a conversation
    */
    rpc AddToGroup(AddToGroupRequest) returns (AddToGroupResponse) {}
    
    /**
    Exits from a group
    */
    rpc ExitFromGroup(ExitFromGroupRequest) returns (ExitFromGroupResponse) {}

    /**
    Renames a group name
    */
    rpc RenameGroup(RenameGroupRequest) returns (RenameGroupResponse) {}

    /**
    Delete a conversation. For group conversation this means leaving the group.
    */
//    rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {}

    /**
    Gets the state of a particular message
    */
//    rpc GetMessageState(GetMessageStateRequest) returns (GetMessageStateResponse) {};

    /**
    Sets the reception state of a particular message
    */
    rpc PutMessageState(PutMessageStateRequest) returns (PutMessageStateResponse) {};
    
    /**
    Gets the reception state of a particular message
    */
//    rpc GetMessageReceptionState(GetMessageReceptionStateRequest) returns (GetMessageReceptionStateResponse) {};

    /**
    Sets the reception state of a particular message
    */
//    rpc PutMessageReceptionState(PutMessageReceptionStateRequest) returns (PutMessageReceptionStateResponse) {};

    /**
    Gets contact list of the currently logged user ID
    */
    rpc GetContacts(GetContactsRequest) returns (GetContactsResponse) {};

    /**
    Adds a new contact into the contact list of the currently logged user ID
    */
    rpc PutContact(PutContactRequest) returns (PutContactResponse) {};

    /**
    Deletes a contact from the contact list of the currently logged in user ID 
    */
    rpc DeleteContact(DeleteContactRequest) returns (DeleteContactResponse) {};

    /**
    Blocks a contact
    */
    rpc BlockContact(BlockContactRequest) returns (BlockContactResponse) {};

    /**
    Unblocks a contact
    */
    rpc UnblockContact(UnblockContactRequest) returns (UnblockContactResponse) {};

    /**
    Registers a new profile
    */
    rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {};

    /**
    Edits the profile of currently logged in user ID
    */
    rpc EditProfile(EditProfileRequest) returns (EditProfileResponse) {};

    /**
    Gets the profile of a specific user ID
    */
    rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {};

    /**
    Uploads profile picture
    */
    rpc UploadProfilePicture(stream UploadProfilePictureRequest) returns (UploadProfilePictureResponse);

    /**
    Gets profile picture
    */
    rpc GetProfilePicture(GetProfilePictureRequest) returns (stream GetProfilePictureResponse);

    /**
    Verify OTP
    */
    rpc VerifyOTP(VerifyOTPRequest) returns (VerifyOTPResponse) {};

    /**
    Echo
    */
    rpc Echo(EchoRequest) returns (EchoResponse) {};

    /**
    Registers an FCM token
    */
    rpc RegisterFCM(RegisterFCMRequest) returns (RegisterFCMResponse) {};

    /**
    Acknowledges an notification
    */
    rpc AckMessageNotificationStream(AckMessageNotificationStreamRequest) returns (AckMessageNotificationStreamResponse) {};
}

message BlockContactRequest {
    // The userID to be blocked
    string userID = 1; 
}

message BlockContactResponse {
    // The userID that has been blocked
    string userID = 1; 
}

message UnblockContactRequest {
    // The userID to be unblocked
    string userID = 1;
}

message UnblockContactResponse {
    // The userID that has been unblocked
    string userID = 1;
}

message GetProfilePictureRequest {
    // THe userID of the user
    string userID = 1;
}

message GetProfilePictureResponse {
    // The image of the profile picture
    bytes contents = 1;
}

message EchoRequest {
    // Echo message
    string message = 1;
}

message EchoResponse {
    // Echo reply
    string reply = 1;
}

message RenameGroupRequest {
    // The `groupID` to be renamed
    string groupID = 1;
    // The newName of the group
    string newName = 2;
}

message RenameGroupResponse {
    bool success = 1;
}

message ExitFromGroupRequest {
    // The `groupID` to exit from
    string groupID = 1;
}

message ExitFromGroupResponse {
    bool success = 1;
}

message RemoveAdminRoleRequest {
    // The `groupID` of the user to be stripped from
    string groupID = 1;
    // The userID to be stripped from
    string userID = 2;
}

message RemoveAdminRoleResponse {
    bool success = 1;
}

message RemoveFromGroupRequest {
    // The groupID of the user to be removed from
    string groupID = 1;
    // The userID to be removed from
    string userID = 2;
}

message RemoveFromGroupResponse {
    bool success = 1;
}

message ListGroupParticipantsRequest {
    // The groupID of the participants
    string groupID = 1;
}

message ListGroupParticipantsResponse {
    // The participants list
    repeated GroupParticipant participants = 1; 
}

message VerifyOTPRequest {
    // The phone number
    string phoneNumber = 1;
    // The OTP
    string OTP = 2;
    // The device ID 
    string deviceID = 3;
}

message VerifyOTPResponse {
    // The authentication token
    string token = 1;
}

message CreateProfileRequest {
    // The device ID of the user
    string deviceID = 1;
    // The phoneNumber
    string phoneNumber = 2;
}

message CreateProfileResponse {
    // The generated userID
    string userID = 1;
    // The OTP string. This is only passed in DEBUG mode
    string otpDebug = 2;
}

message EditProfileRequest {
    // The full name of the user
    string name = 1;
    // The username of the user
    string userName = 2;
    // Arbitrary data in JSON
    string customData = 3;
    // Avatar media ID
    string avatarMediaId = 4;
}

message EditProfileResponse {
    bool success = 1;
    string message = 2;
}

message GetProfileRequest {
    string userID = 1;
}

message GetProfileResponse {
    // The full name
    string name = 1;
    // The user name
    string userName = 2;

    // The phone number
    string phoneNumber = 3;
    // The custom data
    string customData = 4;
    // The media ID of the user
    string avatarMediaId = 5;
}

message ListConversationsRequest {
}

message ListConversationsResponse {
    repeated Conversations list = 1;
}


message Conversations {
    // The userID of the peer (or the group ID if it is a group conversation)
    string chatID = 1;
    // The chat name
    string chatName = 2;
    // The last excerpt of the conversation
    string excerpt = 3;
    // The timestamp of last message
    int64 timestamp = 4;
    // The notification setting
    int64 notification = 5;
    // The chat type, 0 for peer-to-peer and 1 for group conversation
    int32 chatType = 6;
    // True if current user is the group admin of this conversation (if it is a group conversation)
    bool isGroupAdmin = 7;
    // The avatar of a conversation
    string avatar = 8;
    // The image of the avatar thumbnail
    bytes avatarThumbnail = 9;
    // The phonenumber of this conversation (if it is peer-to-peer)
    string phoneNumber = 10;
    // The username of this conversation (if it is peer-to-peer)
    string userName = 11;
    // The custom data of this conversation (if it is peer-to-peer)
    string customData = 12;
}

message UpdateConversationRequest {
    string chatID = 1;
    string excerpt = 2;
    int64 timestamp = 3;
}

message UpdateConversationResponse {
    bool success = 1;
    string message = 2;
}

message DeleteContactRequest {
    // userID @ metadata
    string userID = 1; // UserID to be deleted
}

message DeleteContactResponse {
    bool success = 1;
    string message = 2;
}

message GetContactsRequest {
}

message GetContactsResponse {
    repeated Contacts list = 1;
}

message Contacts {
    // The user ID of the peer
    string peerID = 1;
    // The name of the contact
    string name = 2;
    // The settings of the notification
    int64 notification = 3;
    // The image of the thumbnail of the avatar
    bytes avatar_thumbnail = 4;
    // The phone number of the peer
    string phoneNumber = 5;
    // The username of the peer
    string userName = 6;
    // The customData of the peer
    string customData = 7;
}

message PutContactRequest {
    // The phone number
    string phoneNumber = 1;
    // The contact data
    Contacts contactData = 2;
}

message PutContactResponse {
    bool success = 1;
    string message = 2;
}

enum ConversationType {
    PeerToPeer = 0;
    Group = 1;
    Management = 2;
}

message GetMessageReceptionStateRequest {
    string userID = 1;
    string messageID = 2;
}

message GetMessageReceptionStateResponse {
    MessageReceptionState status = 1;
}

enum MessageState {
    // Normal message
    Normal = 0;
    // The message has been retracted
    Retracted = 1;
}

message GetMessageStateRequest {
    // The peer ID 
    string userID = 1;
    // The message ID
    string messageID = 2;
}

message GetMessageStateResponse {
    MessageState state = 1;
}

enum MessageReceptionState {
    // Draft state, it is not yet sent to Ngobrel
    Draft = 0;
    // Sent state, it should be set by the client when sending the message
    Sent = 1;
    // Received state, it is set by Ngobrel 
    Received = 2;
    // Read state, it is set by the recipient
    Read = 3;
}

message PutMessageStateRequest {
    // The messageID
    int64 messageID = 1;
    // The new status of the message
    MessageReceptionState status = 2;
    // The chatID of the message (or the recipientID if it is not a group conversation)
    string chatID = 3;
}

message PutMessageStateResponse {
    bool success = 1;
}

message PutMessageReceptionStateRequest {
    // userID is fetched from metadata
    string messageID = 1;
    MessageReceptionState status = 2;
}

message PutMessageReceptionStateResponse {
    bool success = 1;
} 

message CreateConversationRequest {
    // The userID to be invited to
    string userID = 1;
    // The chatID of the chat
    string chatID = 2;
    // The type of the conversation
    ConversationType type = 3;
}

message CreateConversationResponse {
    string chatID = 1;
    string message = 2;
}

message DeleteConversationRequest {
    string chatID = 1;
}

message DeleteConversationResponse {
    bool success = 1;
    string message = 2;
}

message AddToGroupRequest {
    string groupID = 1;
    repeated GroupParticipant participants = 2;
}

message  AddToGroupResponse {
    string groupID = 1;
}

message UploadMediaRequest {
    // The file name
    string fileName = 1;
    // The content type of the media
    string contentType = 2;
    // The indicator whether it is encrypted
    bool isEncrypted = 3;
    // The actual contents
    bytes contents = 4;
}

message UploadMediaResponse {
    string mediaID = 1;    
}

message UploadProfilePictureRequest {
    bytes contents = 1;
}

message UploadProfilePictureResponse {
    string mediaID = 1;
}

message GetMediaRequest {
    string mediaID = 1;
}

message GetMediaResponse {
    bytes contents = 1;
}

message GetMessagesRequest {
    // empty, the recipient device id is collected from metadata
}

message GetMessageNotificationStream {
    int64 timestamp = 1;
    string sender = 2;
    string recipient = 3;
}

message AckMessageNotificationStreamRequest {
    int64 timestamp = 1;
    string sender = 2;
    string recipient = 3;
}

message AckMessageNotificationStreamResponse {
    bool success = 1;
}

message GetMessagesResponseItem {
    // The recipient ID
    string  recipientID         = 1;
    // The sender ID
    string  senderID            = 2;
    // The sender device ID
    string  senderDeviceID      = 3;
    // The message ID provided by Ngobrel
    int64   messageID           = 4;
    // The timestamp provided by Ngobrel
    int64   messageTimestamp    = 5;
    // The contents of the message
    string  messageContents     = 6;
    // The encrypted 
    bool    messageEncrypted    = 7;
}

message PutMessageResponse {
    // The new message ID
    int64 messageID = 1;
    // The new timestamp
    int64 messageTimestamp = 2;
}

message PutMessageRequest {
    // The recipientID
    string  recipientID         = 1;
    // The messageID. This is an epoch in microseconds. This will be modified by Ngobrel to create a unified messageID
    int64   messageID           = 2;
    // The timestamp
    int64   messageTimestamp    = 3;
    // The message contents
    string  messageContents     = 4;
    // The encrypted indicator
    bool    messageEncrypted    = 5;
    // The excerpt of the message
    string  messageExcerpt      = 6;

    // The messageType
    int64   messageType         = 7;
}

message PublicGetKeysRequest {
    string  userID   = 1;
}

message PublicGetKeysResponse {
    bytes   keys    = 1;
}

message PutKeysRequest {
    string  userID   = 1;
    bytes   keys     = 2;
}

message PutKeysResponse {
    string  userID   = 1;
}

message GroupParticipant {
    // The userID
    string userID = 1;
    // The name of the participant
    string name = 2;
    // The phone number of the participant
    string phoneNumber = 3;
    // The username of the participant
    string user_name = 4;
    // The custom data in JSON
    string customData = 5;
    // The indicator whether the participant is administrator
    bool isAdmin = 6;
    // The avatar mediaID
    string avatar = 7;
    // The thumbnail of the avatar
    bytes avatarThumbnail = 8;
}
message CreateGroupConversationRequest {
    string name  = 1;
    string avatar = 2 ;
    repeated GroupParticipant participants = 3;
}

message CreateGroupConversationResponse {
    string groupID = 1;
}

message RegisterFCMRequest {
    string FCMToken = 1;
}

message RegisterFCMResponse  {
    bool success = 1;
}