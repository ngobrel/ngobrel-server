syntax = "proto3";
option go_package = "ngobrel";
/*
Ngobrel service
Functions prefixed with Public are public methods. All protected methods will have the following variables exposed
through metadata:

  string myUserID, the UUID string of currently login userID
  string myDeviceID, the UUID string of currently login deviceID

  */
service Ngobrel {

    /**
    Retrieves public keys associated with the requested userID
    */
//    rpc PublicGetKeys(PublicGetKeysRequest) returns (PublicGetKeysResponse) {}

    /**
    Puts public keys associated with currently logged in user
    */
//    rpc PutKeys(PutKeysRequest) returns (PutKeysResponse) {}
    
    /**
    Sends message
    */
    rpc PutMessage(PutMessageRequest) returns (PutMessageResponse) {}
    
    /**
    Gets messages for currently logged in deviceID
    */
    rpc GetMessages(GetMessagesRequest) returns (stream GetMessagesResponseItem) {}

    /**
    Get notifications for incoming messages
    */
    rpc GetMessageNotification(GetMessagesRequest) returns (stream GetMessageNotificationStream) {}

    /**
    Uploads media file
    */
    rpc UploadMedia(stream UploadMediaRequest) returns (UploadMediaResponse) {}
    
    /**
    Gets media file
    */
//    rpc GetMedia(stream GetMediaRequest) returns(GetMediaResponse) {}

    /**
    Creates a group conversation
    */
    rpc CreateGroupConversation(CreateGroupConversationRequest) returns (CreateGroupConversationResponse) {}

    /**
    Creates a new conversation, either a peer-to-peer or group conversation
    */
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}

    /**
    List available conversations for currently logged in userID
    */
    rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {}
 
    /**
    Updates a conversation
    */
    rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {}

    /**
    Lists all participants in a group
    */
    rpc ListGroupParticipants(ListGroupParticipantsRequest) returns (ListGroupParticipantsResponse) {}

    /**
    Removes an admin role of a group from a user
    */
    rpc RemoveAdminRole(RemoveAdminRoleRequest) returns (RemoveAdminRoleResponse) {}

    /**
    Removes a user from a group
    */
    rpc RemoveFromGroup(RemoveFromGroupRequest) returns (RemoveFromGroupResponse) {}

    /**
    Invite other people into a conversation
    */
    rpc AddToGroup(AddToGroupRequest) returns (AddToGroupResponse) {}
    
    /**
    Exits from a group
    */
    rpc ExitFromGroup(ExitFromGroupRequest) returns (ExitFromGroupResponse) {}

    /**
    Renames a group name
    */
    rpc RenameGroup(RenameGroupRequest) returns (RenameGroupResponse) {}

    /**
    Delete a conversation. For group conversation this means leaving the group.
    */
//    rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {}

    /**
    Gets the state of a particular message
    */
//    rpc GetMessageState(GetMessageStateRequest) returns (GetMessageStateResponse) {};

    /**
    Sets the state of a particular message
    */
//    rpc PutMessageState(PutMessageStateRequest) returns (PutMessageStateResponse) {};
    
    /**
    Gets the reception state of a particular message
    */
//    rpc GetMessageReceptionState(GetMessageReceptionStateRequest) returns (GetMessageReceptionStateResponse) {};

    /**
    Sets the reception state of a particular message
    */
//    rpc PutMessageReceptionState(PutMessageReceptionStateRequest) returns (PutMessageReceptionStateResponse) {};

    /**
    Gets contact list of the currently logged user ID
    */
    rpc GetContacts(GetContactsRequest) returns (GetContactsResponse) {};

    /**
    Adds a new contact into the contact list of the currently logged user ID
    */
    rpc PutContact(PutContactRequest) returns (PutContactResponse) {};

    /**
    Deletes a contact from the contact list of the currently logged in user ID 
    */
//    rpc DeleteContact(DeleteContactRequest) returns (DeleteContactResponse) {};

    /**
    Registers a new profile
    */
    rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {};

    /**
    Edits the profile of currently logged in user ID
    */
    rpc EditProfile(EditProfileRequest) returns (EditProfileResponse) {};

    /**
    Gets the profile of a specific user ID
    */
    rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {};

    /**
    Uploads profile picture
    */
    rpc UploadProfilePicture(stream UploadProfilePictureRequest) returns (UploadProfilePictureResponse);

    /**
    Gets profile picture
    */
    rpc GetProfilePicture(GetProfilePictureRequest) returns (stream GetProfilePictureResponse);

    /**
    Verify OTP
    */
    rpc VerifyOTP(VerifyOTPRequest) returns (VerifyOTPResponse) {};

    /**
    Echo
    */
    rpc Echo(EchoRequest) returns (EchoResponse) {};
}

message GetProfilePictureRequest {
    string userID = 1;
}

message GetProfilePictureResponse {
    bytes contents = 1;
}

message EchoRequest {
    string message = 1;
}

message EchoResponse {
    string reply = 1;
}

message RenameGroupRequest {
    string groupID = 1;
    string newName = 2;
}

message RenameGroupResponse {
    bool success = 1;
}

message ExitFromGroupRequest {
    string groupID = 1;
}

message ExitFromGroupResponse {
    bool success = 1;
}

message RemoveAdminRoleRequest {
    string groupID = 1;
    string userID = 2;
}

message RemoveAdminRoleResponse {
    bool success = 1;
}

message RemoveFromGroupRequest {
    string groupID = 1;
    string userID = 2;
}

message RemoveFromGroupResponse {
    bool success = 1;
}

message ListGroupParticipantsRequest {
    string groupID = 1;
}

message ListGroupParticipantsResponse {
    repeated GroupParticipant participants = 1; 
}

message VerifyOTPRequest {
    string phoneNumber = 1;
    string OTP = 2;
    string deviceID = 3;
}

message VerifyOTPResponse {
    string token = 1;
}

message CreateProfileRequest {
    string deviceID = 1;
    string phoneNumber = 2;
}

message CreateProfileResponse {
    string userID = 1;
    string otpDebug = 2;
}

message EditProfileRequest {
    string name = 1;
    string userName = 2;
    string customData = 3;
    string avatarMediaId = 4;
}

message EditProfileResponse {
    bool success = 1;
    string message = 2;
}

message GetProfileRequest {
    string userID = 1;
}

message GetProfileResponse {
    string name = 1;
    string userName = 2;
    string phoneNumber = 3;
    string customData = 4;
    string avatarMediaId = 5;
}

message ListConversationsRequest {
}

message ListConversationsResponse {
    repeated Conversations list = 1;
}


message Conversations {
    string chatID = 1;
    string chatName = 2;
    string excerpt = 3;
    int64 timestamp = 4;
    int64 notification = 5;
    int32 chatType = 6;
    bool isGroupAdmin = 7;
    string avatar = 8;
    bytes avatarThumbnail = 9;
}

message UpdateConversationRequest {
    string chatID = 1;
    string excerpt = 2;
    int64 timestamp = 3;
}

message UpdateConversationResponse {
    bool success = 1;
    string message = 2;
}

message DeleteContactRequest {
    // userID @ metadata
    string userID = 1; // UserID to be deleted
}

message DeleteContactResponse {
    bool success = 1;
    string message = 2;
}

message GetContactsRequest {
}

message GetContactsResponse {
    repeated Contacts list = 1;
}

message Contacts {
    string peerID = 1;
    string name = 2;
    int64 notification = 3;
    bytes avatar_thumbnail = 4;
    string phoneNumber = 5;
    string userName = 6;
    string customData = 7;
}

message PutContactRequest {
    string phoneNumber = 1;
    Contacts contactData = 2;
}

message PutContactResponse {
    bool success = 1;
    string message = 2;
}

enum ConversationType {
    PeerToPeer = 0;
    Group = 1;
    Management = 2;
}

message GetMessageReceptionStateRequest {
    string userID = 1;
    string messageID = 2;
}

message GetMessageReceptionStateResponse {
    MessageReceptionState status = 1;
}

enum MessageState {
    Normal = 0;
    Retracted = 1;
}

message GetMessageStateRequest {
    string userID = 1;
    string messageID = 2;
}

message GetMessageStateResponse {
    MessageState state = 1;
}

enum MessageReceptionState {
    Draft = 0;
    Sent = 1;
    Received = 2;
    Read = 3;
}

message PutMessageStateRequest {
    string messageID = 1;
    MessageReceptionState status = 2;
}

message PutMessageStateResponse {
    bool success = 1;
    string message = 2;
}

message PutMessageReceptionStateRequest {
    // userID is fetched from metadata
    string messageID = 1;
    MessageReceptionState status = 2;
}

message PutMessageReceptionStateResponse {
    bool success = 1;
} 

message CreateConversationRequest {
    string userID = 1;
    string chatID = 2;
    ConversationType type = 3;
}

message CreateConversationResponse {
    string chatID = 1;
    string message = 2;
}

message DeleteConversationRequest {
    string chatID = 1;
}

message DeleteConversationResponse {
    bool success = 1;
    string message = 2;
}

message AddToGroupRequest {
    string groupID = 1;
    repeated GroupParticipant participants = 2;
}

message  AddToGroupResponse {
    string groupID = 1;
}

message UploadMediaRequest {
    string fileName = 1;
    string contentType = 2;
    bool isEncrypted = 3;
    bytes contents = 4;
}

message UploadMediaResponse {
    string mediaID = 1;    
}

message UploadProfilePictureRequest {
    bytes contents = 1;
}

message UploadProfilePictureResponse {
    string mediaID = 1;
}

message GetMediaRequest {
    string mediaID = 1;
}

message GetMediaResponse {
    bytes content = 1;
}

message GetMessagesRequest {
    // empty, the recipient device id is collected from metadata
}

message GetMessageNotificationStream {
    int64 timestamp = 1;
}

message GetMessagesResponseItem {
    string  recipientID         = 1;
    string  senderID            = 2;
    string  senderDeviceID      = 3;
    int64   messageID           = 4;
    int64   messageTimestamp    = 5;
    string  messageContents     = 6;
    bool    messageEncrypted    = 7;
}

message PutMessageResponse {
    int64 messageID = 1;
    int64 messageTimestamp = 2;
}

message PutMessageRequest {
    string  recipientID         = 1;
    int64   messageID           = 2;
    int64   messageTimestamp    = 3;
    string  messageContents     = 4;
    bool    messageEncrypted    = 5;
    string  messageExcerpt      = 6;
}

message PublicGetKeysRequest {
    string  userID   = 1;
}

message PublicGetKeysResponse {
    bytes   keys    = 1;
}

message PutKeysRequest {
    string  userID   = 1;
    bytes   keys     = 2;
}

message PutKeysResponse {
    string  userID   = 1;
}

message GroupParticipant {
    string userID = 1;
    string name = 2;
    string phoneNumber = 3;
    string user_name = 4;
    string customData = 5;
    bool isAdmin = 6;
}
message CreateGroupConversationRequest {
    string name  = 1;
    bytes avatar = 2 ;
    repeated GroupParticipant participants = 3;
}

message CreateGroupConversationResponse {
    string groupID = 1;
}