// Code generated by MockGen. DO NOT EDIT.
// Source: ngobrel.rocks/ngobrel (interfaces: NgobrelClient)

// Package mock_ngobrel is a generated GoMock package.
package mock_ngobrel

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	ngobrel "ngobrel.rocks/ngobrel"
	reflect "reflect"
)

// MockNgobrelClient is a mock of NgobrelClient interface
type MockNgobrelClient struct {
	ctrl     *gomock.Controller
	recorder *MockNgobrelClientMockRecorder
}

// MockNgobrelClientMockRecorder is the mock recorder for MockNgobrelClient
type MockNgobrelClientMockRecorder struct {
	mock *MockNgobrelClient
}

// NewMockNgobrelClient creates a new mock instance
func NewMockNgobrelClient(ctrl *gomock.Controller) *MockNgobrelClient {
	mock := &MockNgobrelClient{ctrl: ctrl}
	mock.recorder = &MockNgobrelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNgobrelClient) EXPECT() *MockNgobrelClientMockRecorder {
	return m.recorder
}

// PutMessage mocks base method
func (m *MockNgobrelClient) PutMessage(arg0 context.Context, arg1 *ngobrel.PutMessageRequest, arg2 ...grpc.CallOption) (*ngobrel.PutMessageResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMessage", varargs...)
	ret0, _ := ret[0].(*ngobrel.PutMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMessage indicates an expected call of PutMessage
func (mr *MockNgobrelClientMockRecorder) PutMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMessage", reflect.TypeOf((*MockNgobrelClient)(nil).PutMessage), varargs...)
}
